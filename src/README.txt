Our classes Board, AIPlayer, HumanPlayer, Player, Score, Move, are completed. Each member of the group took on different classes to write. Now we are currently working on the main game and trying to incorporate a JavaFX aspect to the main game.  

Our form of collaboration is on GitHub, where all our classes are stored.  

Board class: The Java code defines a `Board` class for the game of Nim. It manages the board's state using an ArrayList to track the number of objects in each heap. Methods allow for displaying the board, removing objects from heaps based on player input, and checking if the game is over. This encapsulation supports gameplay by providing essential functionalities for board management and game progression. 

AIPlayer: The `AIPlayer` class is designed for AI-controlled players in Nim. It implements strategies based on the concept of Nim sum to make optimal moves, aiming to leave the opponent with the last object from the last heap. The `makeMove()` method calculates the Nim sum and either makes a strategic move to force the opponent into a losing position or resorts to a random move if no winning move is evident. The class encapsulates AI logic for playing Nim effectively against human opponents. 

Player: The `Player` class represents a player in the game, with attributes such as name, unique identifier, and score. The constructor initializes the player's name, score, and generates a random player ID. It performs validation to ensure the name is not null and contains valid characters. Getter methods retrieve the player's name, ID, and score, while a setter method allows updating the player's name with validation. The `win()` method increments the player's score when they win a game. This class provides essential functionality for managing player information and game statistics in the Nim game. 

Score: The `Score` class manages individual player scores in the Nim game. It contains instance variables for the player's name, score, and game ID. The constructor initializes these variables, while getter and setter methods allow accessing and updating them. `getPlayerName()` retrieves the player's name, `setPlayerName()` updates it, `getScore()` retrieves the player's score, `setScore()` updates it, `getGameID()` retrieves the game ID, and `setGameID()` updates it. This class provides essential functionality for tracking player scores and game IDs during Nim gameplay. 

Move: The `Move` class represents a move made by a player in the Nim game. It contains instance variables for the heap index (`HIndex`) and the number of objects removed (`numObjectsRemoved`). The constructor initializes these variables based on the parameters passed. Getter and setter methods are provided for accessing and updating the heap index and the number of objects removed. `getHeapIndex()` retrieves the heap index, `setHeapIndex()` updates it, `getNumObjectsRemoved()` retrieves the number of objects removed, and `setNumObjectsRemoved()` updates it. This class facilitates tracking and managing player moves during Nim gameplay. 

